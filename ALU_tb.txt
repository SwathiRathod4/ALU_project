`include "alu_final.v"
`define PASS 1'b1   //new
`define FAIL 1'b0
`define no_of_testcase 110

module alu_final_tb1();
//parameter PASS=1;
//parameter FAIL=0;
parameter width=8,cwidth=4;
parameter no_of_testcase=8;
localparam TESTCASE_WIDTH = 19 + 2*width +(2*width +1)+ cwidth;

localparam RESPONSE_WIDTH = TESTCASE_WIDTH + 6 + (2*width+ 1); //PACKET_WIDTH + 6 CONSTANTS+(RESERVED+OUTPUT)
localparam RESULT_WIDTH = (2*width+ 1) +6;  // RES + COUT + EGL + OVF + ERR
localparam SCB_WIDTH = (6+width+1)+ width + 8 + (6+2*width+1);


reg [TESTCASE_WIDTH-1:0] curr_test_case = {TESTCASE_WIDTH{1'b0}};
reg [TESTCASE_WIDTH-1:0] stimulus_mem [0:`no_of_testcase-1];
reg [TESTCASE_WIDTH-1:0] response_packet;

integer i, j;
reg CLK, RST, CE ,MODE, CIN;
event fetch_stimulus;

reg [width-1:0] OPA, OPB;
reg [cwidth-1:0] CMD;
reg [1:0] INP_VALID; // NEW
reg [7:0] Feature_ID;
reg [2:0] Comparison_EGL;
reg [2*width:0] Expected_RES;
reg err, cout, ov;
//reg [width-1:0] Reserved_RES;

wire [2*width:0] RES;
wire ERR, OFLOW, COUT;
wire [2:0] EGL;
wire [(width*2):0] expected_data;
reg  [width*2:0] exact_data;



alu_final #( .width(width),.cwidth(cwidth))dut (.OPA(OPA),.OPB(OPB),.CIN(CIN),.CLK(CLK),.CMD(CMD),.CE(CE),.MODE(MODE),.INP_VALID(INP_VALID),.COUT(COUT),.OFLOW(OFLOW),.RES(RES),.G(EGL[1]), .E(EGL[2]), .L(EGL[0]),.ERR(ERR),.RST(RST));

integer stim_mem_ptr = 0,stim_stimulus_mem_ptr = 0,fid =0 , pointer =0 ;//STIMULUS GENERATOR

initial //INITIALIZING CLOCK

                begin CLK=0;
                        forever #60 CLK=~CLK;
                end

task read_stimulus();   //READ DATA FROM THE TEXT VECTOR FILE
                begin
                #10 $readmemb ("stimulus1.txt",stimulus_mem);
               end
        endtask

always@(fetch_stimulus)
                begin
                        curr_test_case=stimulus_mem[stim_mem_ptr];
                        $display ("stimulus_mem data = %0b \n",stimulus_mem[stim_mem_ptr]);
                        $display ("packet data = %0b \n",curr_test_case);
                        stim_mem_ptr=stim_mem_ptr+1;
                end

 task driver();
        begin
             ->fetch_stimulus;
      @(posedge CLK);
      Feature_ID = curr_test_case[(TESTCASE_WIDTH-1)-: 8];
      INP_VALID = curr_test_case[(TESTCASE_WIDTH-9) -: 2];
      OPA = curr_test_case[(TESTCASE_WIDTH - 11) -: width ];
      OPB = curr_test_case[(TESTCASE_WIDTH - 11 - width)-: width];
      CMD = curr_test_case[(TESTCASE_WIDTH - 11 - 2* width) -:4];//21:18
      CIN = curr_test_case[(TESTCASE_WIDTH - 11 - 2*width - cwidth)];//17
      CE = curr_test_case[(TESTCASE_WIDTH - 11 - 2*width - cwidth-1)];//16
      MODE = curr_test_case[(TESTCASE_WIDTH - 11 - 2*width - cwidth-2)];//15
     // Reserved_RES = curr_test_case[(TESTCASE_WIDTH - 11 - 2*width - cwidth-3)-:width];
      Expected_RES = curr_test_case[(TESTCASE_WIDTH - 11 - 2*width - cwidth-3)-: 2*width+1];
      cout = curr_test_case[5];
      Comparison_EGL = curr_test_case[4:2];//3bit_EGL
      ov = curr_test_case[1];//1_ERR
      err = curr_test_case[0];//0_OV

            $display("At time (%0t), Feature_ID = %8b, INP_Valid = %2b, OPA = %8b, OPB = %8b, CMD = %4b, CIN = %1b, CE = %1b, MODE = %1b, expected_result = %9b, cout = %1b, Comparison_EGL = %3b, ov = %1b, err = %1b",$time,Feature_ID,INP_VALID,OPA,OPB,CMD,CIN,CE,MODE, Expected_RES,cout,Comparison_EGL,ov,err);
                end
        endtask

task global_init();
    begin
        curr_test_case = {TESTCASE_WIDTH{1'b0}};
        response_packet = {RESPONSE_WIDTH{1'b0}};
        stim_mem_ptr = 0;
    end
  endtask


        task monitor(); begin
    repeat(4) @(posedge CLK);
    #5 begin
      response_packet[TESTCASE_WIDTH-1:0] = curr_test_case;
      response_packet[TESTCASE_WIDTH +: 5] = {ERR, OFLOW, EGL, COUT};
      response_packet[TESTCASE_WIDTH+5 +: 2*width+1] = RES;
      exact_data = {RES, COUT, EGL, OFLOW, ERR};

      $display("Monitor: RES=%b, COUT=%b, EGL=%b, OFLOW=%b, ERR=%b",
               RES, COUT, EGL, OFLOW, ERR);
    end
  end endtask
  assign expected_data = {Expected_RES, cout, Comparison_EGL, ov, err};
     reg [SCB_WIDTH-1:0] scb_stimulus_mem [0:`no_of_testcase-1];

task score_board();
    reg[6+(width*2) :0]expected_res;
   // reg[width-1:0]Reserved_RES;
    reg[7:0]feature_id;
    reg[6+(2*width) :0]response_data;
    begin
      #5;
      feature_id = curr_test_case[(TESTCASE_WIDTH -1) -:8];
     // Reserved_RES = curr_test_case[(TESTCASE_WIDTH - 11 - 2*width - cwidth-3)-:width];
      expected_res = curr_test_case[(TESTCASE_WIDTH - 11 - 2*width - cwidth)-: 2*width+1];
      response_data = response_packet[TESTCASE_WIDTH +:(2*width+7)];
      $display("expected result = %b ,response data = %b",expected_data,exact_data);
      if(expected_data === exact_data) begin
        scb_stimulus_mem[stim_stimulus_mem_ptr] = {1'b0, Feature_ID,
          expected_data, response_data, 1'b0, `PASS};
        $display("Test %0d PASSED", stim_stimulus_mem_ptr);
      end
      else begin
        scb_stimulus_mem[stim_stimulus_mem_ptr] = {1'b0, Feature_ID,
          expected_data, response_data, 1'b0, `FAIL};
        $display("Test %0d FAILED", stim_stimulus_mem_ptr);
      end
      stim_stimulus_mem_ptr = stim_stimulus_mem_ptr + 1;
    end
  endtask
      task gen_report;
    integer file_id, pointer, i;  // Declare loop variable outside
    begin
      file_id = $fopen("results1.txt", "w");
      pointer = 0;  // Initialize counter
      while (pointer < `no_of_testcase) begin  // Changed to while loop
        $fdisplay(file_id, "Feature ID %8b : %s",  scb_stimulus_mem[pointer][(SCB_WIDTH-2) -: 8],
                 scb_stimulus_mem[pointer][0] ? "PASS" : "FAIL");
        pointer = pointer + 1;  // Changed from ++
    end
      $fclose(file_id);

    end
  endtask

 task dut_reset(); begin
    CE = 1;
    #10 RST = 1;
    #20 RST = 0;
  end endtask



 initial begin
    #10;
    $display("\n--- Starting ALU Verification ---");
    global_init();
    dut_reset();
    read_stimulus();
    for(j = 0; j <= `no_of_testcase-1; j = j + 1) begin
      fork
        driver();
        monitor();
      join
      score_board();
    end
    gen_report();
    $fclose(fid);
    #100 $display("\n--- Verification Complete ---");
    $finish();
  end
endmodule
